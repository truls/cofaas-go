// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-cofaas-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-cofaas-go-grpc v1.3.0
// - protoc             v3.19.6
// source: helloworld.proto

package helloworld

import (
	context "context"
	errors "errors"
)

const (
	Greeter_SayHello_FullMethodName = "/helloworld.Greeter/SayHello"
)

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...interface{}) (*HelloReply, error)
}

type unimplementedGreeterClient struct{}

func (c *unimplementedGreeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...interface{}) (*HelloReply, error) {
	return nil, errors.New("Method GreeterClient is not implemented")
}

var clientImplementation GreeterClient = unimplementedGreeterClient{}

func NewGreeterClient(cc interface{}) GreeterClient {
	return clientImplementation
}

func SetGreeterClientImplementation(impl GreeterClient) {
	clientImplementation = impl
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedGreeterServer()
}

var ServerImplementation GreeterServer = UnimplementedGreeterServer{}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, errors.New("method SayHello not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s interface{}, srv GreeterServer) {
	ServerImplementation = srv
}

var Greeter_ServiceDesc = 0
